# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.provider "virtualbox" do |vb|
  #config.vm.provider "libvirt" do |vb|
  #config.vm.box = "uvsmtid/fedora-21-server-minimal"
  config.vm.box = "box-cutter/fedora22"
  #config.vm.box = "chef/fedora-21"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/project"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    sudo dnf install -y setup tree man gcc docker python-devel git vim-enhanced python-pip \
        rpm-build mock libyaml-devel tmux ctags clamav elfutils koji desktop-file-utils \
        perl-Test-MockObject perl-Module-Build \
        perl-Test-Moose-More perl-Test-Differences perl-Test-Deep perl-HTML-Entities-* \
        perl-XML-Entities perl-File-* perl-XML-Simple perl-CGI-Application perl-CGI-Application \
        perl-Time-* perl-YAML* perl-IPC-Run perl-Net-DNS perl-Sort-Versions perl-Test-LongString \
        perl-JSON-XS perl-File-LibMagic perl-Test-MockModule perl-XMLRPC-Lite perl-List-AllUtils \
        perl-Test-MockObject perl-Test-Exception perl-Test-Perl-Critic perl-Pod-POM perl-open

    pip install --user docker-compose

    git config --global color.ui true
    git config --global user.name "Yaobin Shi"
    git config --global user.email yashi@redhat.com

    echo "alias fig=docker-compose" >> ~/.bashrc

    sudo systemctl enable docker.service
    sudo systemctl start docker.service

    sudo groupadd docker
    sudo chown root:docker /var/run/docker.sock
    sudo usermod -a -G docker vagrant
    sudo systemctl restart docker.service
  SHELL
end
